012702 MOV #0 R2 // подпрограмма УМНОЖЕНИЕ
000000
005700 TST R0
100401 BMI 1     // если операнд отрицательный
100001 BPL 1     // если оперенд положительный
005400 NEG R0
005701 TST R1
100401 BMI 1     // если операнд отрицательный
100001 BPL 1 	 // если оперенд положительный
005401 NEG R1
006200 ASR R0    // делим один из операндов
103401 BCS 1     // если нечётное
103001 BCC 1     // если чётное
060102 ADD R1 R2 // накапливаем результат
006301 ASL R1    // удваиваем один из оперендов
005700 TST R0    // уменьшаемый операнд равен нулю?
001371 BNE -13   // если не равен
000207 RTS PC 	 // выход из подпрограммы

012700 MOV #5 R0                // поместить размер первого массива в R0
000005
012703 MOV #1034 R3             // поместить адрес начала первого массива
001034
012705 MOV #1062 R5             // поместить адрес итогого массива
001064
012701 MOV #5 R1                // поместить размер второго массива в R1
000005
012704 MOV #1050 R4             // поместить адрес начала второго массива
001050
010046 MOV R0 -(R6)             // поместить размер первого массива в стек
010146 MOV R1 -(R6)             // поместить размер второго массива в стек
011300 MOV @R3 R0               // поместить первый множитель
012401 MOV (R4+) R1            // поместить второй множитель
004737 JSR PC УМНОЖЕНИЕ 	// выполнить умножение
001050 // -34
012601 MOV (R6)+ R1             // вытолкнуть из стека размер второго массива
012600 MOV (R6)+ R0             // вытолкнуть из стека размер первого массива
010225 MOV R2 (R5)+             // переслать произведение в итоговый массив
077112 SOB R1 8                 // цикл for по второму массиву
005203 INC R3                   
005203 INC R3                   // переход к следующему элементу первого массива
077021 SOB R0 14                // цикл for по первому массиву
